@using RazorLight
@using static KCode.SMITEClient.HtmlGenerating.HtmlViewHelpers
@inherits TemplatePage<KCode.SMITEClient.HtmlGenerating.GodTemplates.GodsViewModel>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SMITE God Overview</title>
    <link rel="stylesheet" href="@GetResourceRef("smitegods.css")" />
</head>
<body>
	<aside id="relatedpages">See also: <a href="god-skins.html">SMITE God Skins</a><a href="god-skin-themes.html">SMITE Skin Themes</a><a href="godstats.html">SMITE God Stats</a> | <a href="https://www.nexus.gg/kissaki">Support this website by buying SMITE in-game items through referral store</a></aside>
	<h1>SMITE God Overview</h1>
	<div id="about" class="data-block">
		<h2>About</h2>
		<p>This is an interactive overview of SMITE®s gods with their associated pantheon and role. This is especially useful for the weekly quests, which may focus on a specific pantheon or role.</p>
		<aside>Updating this table is trivial (e.g. automated), especially compared to traditional, manually created image files. So expect this to stay up to date, or give me a quick heads-up.</aside>
	</div>
	<div id="legend" class="data-block">
		<h2>Legend</h2>
		Free Rotation: <span id="legend_freerotation">FR</span>
	</div>

	<form id="filters" class="data-block">
		<h2>Filters</h2>
		<fieldset>
			<div class="filter">
				<label for="filter-god">God Filter:</label>
				<input id="filter-god" type="text">
				<input id="filter-god-clear" type="button" value="⌧">
			</div>
			<div class="filter">
				<label for="filter-pantheon">Pantheon Filter:</label>
				<ul>
					@foreach (var pantheon in Model.Pantheons)
					{
						<li>
							<label id="filter-pantheon-option-@ToCSSClass(pantheon)" class="filter-pantheon-option">
								<input id="filter-pantheon-cb-@ToCSSClass(pantheon)" class="filter-pantheon-cb" type="checkbox" checked>
								@pantheon
							</label>
						</li>
					}
				</ul>
				<input id="filter-pantheon-clear" type="button" value="All">
				<input id="filter-pantheon-none" type="button" value="None">
				<input id="filter-pantheon-invert" type="button" value="Invert">
				<input id="filter-pantheon-random" type="button" value="Random">
			</div>
			<div class="filter">
				<label>Role Filter:</label>
				<ul>
					@foreach (var role in Model.Roles)
					{
						<li>
							<label id="filter-role-option-@ToCSSClass(role)" class="filter-role-option">
								<input id="filter-role-cb-@ToCSSClass(role)" class="filter-role-cb" type="checkbox" checked>
								@role
							</label>
						</li>
					}
				</ul>
				<input id="filter-role-clear" type="button" value="All">
				<input id="filter-role-none" type="button" value="None">
				<input id="filter-role-invert" type="button" value="Invert">
				<input id="filter-role-random" type="button" value="Random">
			</div>
		</fieldset>
	</form>
	<div style="clear:both">
	</div>
	@if (Model.Gods.Length == 0)
	{
		<p>No god data available.</p>
	}
	else
	{
		<h2>God Grid</h2>
		<table id="smitegodstable">
			<thead>
				<tr>
					<th></th>
					@foreach (var role in Model.Roles)
					{
						<th id="role-column-@ToCSSClass(role)">
							<i class="icon-role icon icon-@ToCSSClass(role)"></i>@role
						</th>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (var pantheon in Model.Pantheons)
				{
					<tr id="pantheon-row-@ToCSSClass(pantheon)">
						<th>
							@pantheon<br>
							<i class="icon-pantheon icon icon-@ToCSSClass(pantheon)"></i>
						</th>
						@foreach (var role in Model.Roles)
						{
							<td>
								<ul>
									@foreach (var god in Model.Gods.Where(x => x.Pantheon == pantheon && x.Roles!.Trim() == role).OrderBy(x => x.Name))
									{
										<li>
											<div class="god">
												@if (god.GodIconUrl == null)
												{
													<div class="godnoicon">no icon</div>
												}
												else
												{
													if (@Model.GodIconSpriteFiles.Length > 0)
													{
														<picture class="godicon">
															<source srcset="img/godicons.avif" type="image/avif">
															<source srcset="img/godicons.webp" type="image/webp">
															<source srcset="img/godicons.png" type="image/png">
															@{
																var iconfilename = god.GodIconUrl.AbsolutePath.Substring(god.GodIconUrl.AbsolutePath.LastIndexOf('/') + 1);
																var offsetX = Model.GodIconSpriteOffsets[iconfilename].x;
																var offsetY = Model.GodIconSpriteOffsets[iconfilename].y;
															}
															@* Half offset because we scale them to half size *@
															<img src="img/godicons.jpg" style="transform-origin: 0 0; transform: translate(-@(offsetX/2)px, -@(offsetY/2)px) scale(0.5);">
														</picture>
														@*<img class="godicon" src="@god.GodIconUrl" title="@god.Name god icon">*@
													}
													else
													{
														<img src="@god.GodIconUrl" alt="@god.Name god icon image">
													}
												}
												<div class="godname">@god.Name</div>
												<a class="godinfo-handle">(i)</a>
												<div class="goddetails">
													<div class="caption">God Details</div>
													<h2>@god.Name</h2>
													<div class="role-pantheon">@god.Pantheon @god.Roles</div>
													<div class="pros">Pros: @god.Pros</div>
													<div class="cons">Cons: @god.Cons</div>
													<div class="abilities">
														<div>Abilities:</div>
														@foreach (var ability in new KCode.SMITEAPI.ResultTypes.Ability[] { god.Ability1!, god.Ability2!, god.Ability3!, god.Ability4!, god.Ability5!, })
														{
															<div class="ability">
																<details>
																	<summary><img data-src="@ability.Url" alt="" />@ability.Summary</summary>
																	<div class="ability-description">
																		@{ var abDesc = ability.Description!.Description!; }
																		<div class="description-primary">@abDesc.Description!</div>
																		<hr>
																		<div>Cost: @abDesc.Cost</div>
																		<div>Cooldown: @abDesc.Cooldown</div>
																		@foreach (var item in abDesc.Menuitems!)
                                                                        {
																			<div>@item.Description@item.Value</div>
																		}
																	</div>
																</details>
															</div>
														}
													</div>
												</div>
												@if (god.OnFreeRotation == "true")
												{
													<div class="freerotation">FR</div>
												}
											</div>
										</li>
									}
								</ul>
							</td>
						}
					</tr>
				}
			</tbody>
		</table>
		<h3>Pick a random god</h3>
		<button id="random-pick-button">Pick random god from the view</button>
		<div id="random-pick-result"></div>
	}
	<footer>
		<p>This interactive overview of SMITE gods has been created by Jan Klass aka <a href="https://github.com/Kissaki">Kissaki</a>. All rights reserved.</p>
		<p>Data provided by <a href="http: //www.hirezstudios.com">Hi-Rez</a>. ©2015 Hi-Rez Studios, Inc. All rights reserved.</p>
		<p><a href="http: //www.smitegame.com">SMITE</a> is a trademark or registered trademark of Hi­Rez Studios, Inc. in the United States and other countries.</p>
	</footer>
	<div id="god-overlay">
	</div>
	<script src="@GetResourceRef("smitegods.js")"></script>
</body>
</html>
